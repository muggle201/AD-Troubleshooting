# This script has dependencies on utils_CTS and utils_DSD
#
param ( [Object[]] $instances ) 

# 2019-03-17 WalterE added Trap #_#
Trap [Exception]
	{
	 # Handle exception and throw it to the stdout log file. Then continue with function and script.
		 $Script:ExceptionMessage = $_
		 "[info]: Exception occurred."  | WriteTo-StdOut
		 "[info]: Exception.Message $ExceptionMessage."  | WriteTo-StdOut 
		 $Error.Clear()
		 continue
	}

$LOGvars= Get-Variable LOG*
if (!($LOGvars.name -contains "LOGFILE_PATH")) {
	New-Variable LOGFILE_PATH      -Scope "Global" #_# only set new var if LOGFILE_PATH does not exits
}

# Function : Check-ASIsInstalled
# -------------------------------------
#
# PowerShell Version:
#			Written to be compatible with PowerShell 1.0
#
# Visibility:
#			Public/Helper 
#
# Description:
# 			Call this function to determine whether OLAP is installed. Checks for regular or WOW6432 installations.
# 
# Arguments:
#			None
#
# Returns:
#			$true if at least one OLAP installation exists on the target machine.
#			$false if no installations exist on the target macine
# 
# Owner:
#			JoSims 
#
function Check-ASIsInstalled
{
	[int]$count=0

	$count=((Enumerate-Instances -KeyToEnumerate "HKLM:\Software\Microsoft\Microsoft SQL Server\Instance Names\OLAP"  -SilentMode | Get-Count) + `
		    (Enumerate-Instances -KeyToEnumerate $global:SQL:SqlServerWow6432InstalledInstancesKey -SilentMode | Get-Count))

	#Clear any errors generated by above commands.  Otherwise, this could be reported with another unexpected error and cause confusion
	$Error.Clear()

	return ($count -gt 0)
}

#
# Function : WriteTo-LogFile
# ---------------------
#
# PowerShell Version:
#			Written to be compatible with PowerShell 1.0
#
# Visibility:
#			Private/Internal - Do not call this function from your PowerShell scripts.  
#
# Description:
# 			This function should is used to log progress and error messages to the ErrorloLogCollectorResults.log 
#			file and the test harness executes
# 
# Arguments:
#			String to write to file
# 
# Owner:
#			JoSims 
#
function WriteTo-LogFile($StringToWrite)
{
	$Error.Clear()           
    trap 
    {
    	"[WriteTo-LogFile] : [ERROR] Trapped exception ..." | WriteTo-StdOut
    	Report-Error 
	}

	"[{0:yyyy-MM-dd HH:mm:ss.fff}] : {1}" -f (Get-Date), $StringToWrite |  Out-File -FilePath $global:LOGFILE_PATH -Append
}

#
# Function : Write-DumpInventory
# ------------------------------
#
# PowerShell Version:
#			Written to be compatible with PowerShell 1.0
#
# Visibility:
#			Private/Internal - Do not call this function from your PowerShell scripts.  
#
# Description:
#		    Writes an inventory of all dump files found for target instance
# 
# Arguments:
#			String to write to file
# 
# Owner:
#			JoSims 
#   
function Write-DumpInventory([string]$InstanceName, [string]$DumpDir)
{
    $Error.Clear()           
    trap 
    {
    	"[Write-DumpInventory] : [EROR] Trapped exception ..." | WriteTo-StdOut
    	Report-Error
    }
   
    if ($null -ne $InstanceName)
    {
        if ($null -ne $DumpDir)
        {
            # This collector can be configured to collect a subset of the minidumps on a given machine.  
            # As such, for debugging purposes the collector writes a dump inventory that's collected with the dump files  
            $DumpInventoryFile = "{0}_{1}_DumpInventory.log" -f $env:ComputerName, $InstanceName
            New-Item -ItemType file -Name $DumpInventoryFile -Path $PWD.Path -Force | Out-Null
            $global:LOGFILE_PATH = Join-Path -Path $PWD.Path -ChildPath $DumpInventoryFile 
            
            # Is path passed to function in $DumpDir valid?
            if ($true -eq (Test-Path -Path $DumpDir -PathType "Container"))
            {
                # Collect (up to) 10 most recent minidump files for this instance
                $Dumpfiles = get-childitem -Path (Join-Path $Dumpdir "*") -Include "*.mdmp" | sort-object -Property Length -Descending
                
                if ($true -eq (Test-Path -Path $global:LOGFILE_PATH -PathType "Leaf"))
                {
                    WriteTo-LogFile ("Dump inventory for instance: {0}" -f $InstanceName)
                    WriteTo-LogFile ("Dump directory: {0}" -f $DumpDir)
                    
                    if ($null -ne $Dumpfiles) 
                    {
                        if (0 -lt $Dumpfiles.Count) 
                        {
                            WriteTo-LogFile ("Total number of dumps discovered is: {0}" -f $Dumpfiles.Count)
                            
                            foreach($DumpFile in $Dumpfiles)
                            {
                                WriteTo-LogFile ("{0} Creation Time: {1} Size: {2}" -f $DumpFile.Name, $DumpFile.CreationTime, $DumpFile.Length)
								# Now collect the file so that it will be included in CAB that's uploaded
                				CollectFiles -FilesToCollect $global:LOGFILE_PATH -SectionDescription ("SQL Server minidumps and related files for instance {0}" -f $InstanceName) -renameOutput $true
                            }
                        }
                    }
                    else
                    {
                        WriteTo-LogFile "No minidumps found ..." 
                    }
                }
            }
            else
            {
                "[Write-DumpInventory] : [ERROR] Invalid path [{0}] passed by caller" -f $DumpDir | WriteTo-StdOut        
            }
            
        } # if ($null -eq $DumpDir)
        else
        {
             '[Write-DumpInventory] : [ERROR] Required parameter -DumpDir was not specified' | WriteTo-StdOut        
        }
        
    } # if ($null -eq $InstanceName)
    else
    {
        '[Write-DumpInventory] : [ERROR] Required parameter -InstanceName was not specified' | WriteTo-StdOut        
    }
}


# Function : Get-ASInstanceRootKey
# ---------------------------------
#
# PowerShell Version:
#			Written to be compatible with PowerShell 1.0
#
# Visibility:
#			Public - call this function from your trap handler and pass it $error[0]
#
# Description:
#        Retrieves the "root" registry key for a given SQL Server instance
# 
# Arguments:
#		$SqlInstanceName: Instance name of SQL Server instance for which you want to retrieve the root registry key
# 
#
# Owner:
#		JoSims 
#
# Revision History: 
#			1.0 08/2011    JoSims
#				Original version
#			1.1 01/18/2012 JoSims
#				Replaced double quotes with single quotes when variable expansion not desired.
 
function Get-ASInstanceRootKey([string]$InstanceName)
{
    trap 
    {
    	'[Get-ASInstanceRootKey] : [ERROR] Trapped exception ...' | WriteTo-StdOut
    	Report-Error
    }

    # Check if $SqlInstanceName parameter was specified
    if ($null -ne $InstanceName)
    {
        # Figure out which registry to use ... Is this a Wow6432 instance?
    	#
    	if ($true -eq (Check-IsInstanceWow6432 -InstanceName $InstanceName -RegKeyToCheck $global:SQL:SqlServerWow6432InstalledInstancesKey )) 	{ 
    		$InstancesKey = $global:SQL:SqlServerWow6432InstalledInstancesKey
            $RootSqlKey = $global:SqlServerWow6432RegKey
    	} else {
    		$InstancesKey = $global:SQL:SqlServerInstalledInstancesKey
            $RootSqlKey = $global:SqlServerRegKey
    	}
        
		$InstancesKey = $InstancesKey -Replace ("Instance Names\\SQL", "Instance Names\OLAP");
		
        # The instance name 'DEFAULT' is expected by the SQL PowerShell provider for the default instance
    	# Therefore when we enumerate MSSQLSERVER from the registry we translate it to DEFAULT.
    	# When we go back to the registry to find things for the DEFAULT instance have to translate back to MSSQLSERVER
    	#
    	if ($InstanceName.ToUpper() -eq 'DEFAULT') {$InstanceName = 'MSSQLSERVER'}
        
        if ($null -ne $InstancesKey)
        {
            # Test for valid path
            if ($true -eq (Test-Path -Path $InstancesKey))
            {
                # Make sure that the instance key we're trying to return actually exists under the instance root key
                if ($true -eq (Test-RegistryValueExists -RegKey $InstancesKey -Name $InstanceName))
                {
                    Join-Path -Path $RootSqlKey -ChildPath ((Get-ItemProperty -Path $InstancesKey).$InstanceName)
                    
                    # Check if Join-Path/Get-ItemProperty failed with an error
                    if ($false -eq $?)
                    {
                       '[Get-ASInstanceRootKey] : [ERROR] Call to Join-Path / Get-ItemProperty failed' | WriteTo-StdOut
					   Report-Error
                    }
                }
                
            }
            else
            {
                '[Get-ASInstanceRootKey] : [WARN] Registry key: [{0}] for instance: [{1}] was not found. This key is used to locate the instance root key for a SQL Server installation' -f $InstancesKey, $SqlInstanceName | WriteTo-StdOut  
				'[Get-ASInstanceRootKey] : [WARN] This may be expected if [{0}] is a SQL Server 2000 default instance' -f $SqlInstanceName | WriteTo-StdOut  
            }
        }
        else
        {
            '[Get-ASInstanceRootKey] : [ERROR] Join-Path returned $null' | WriteTo-StdOut  
            Report-Error 
        }

    } # if ($null -ne $InstanceName)
    else
    {
        '[Get-ASInstanceRootKey] : [ERROR] Required parameter: $Instance was not specified' | WriteTo-StdOut  
    
    }
   
}

# This function works with and returns the dump directory as a string so not susceptible to issues caused by
# cluster drive being offline to the node the collector is run against
function Get-DumpDirectory ([string] $ASInstance)
{
    $Error.Clear()           
	trap 
	{
		"[Get-DumpDirectory] : [ERROR] Trapped exception ..." | WriteTo-Stdout
		Report-Error
	}
    
    if ($null -ne $ASInstance)
    {
    	$InstanceKey = Get-ASInstanceRootKey -InstanceName $ASInstance
        
        if ($null -ne $InstanceKey)
        {
        								
        	if ($true -eq (Test-Path -Path (Join-Path -Path $InstanceKey -ChildPath '\CPE')))
        	{				
        		$CpeRegKey = Join-Path -Path $InstanceKey -ChildPath '\CPE'
        		
                # Test to be sure CpeRegKey is valid
                if ($true -eq (Test-Path -Path $CpeRegKey))
                {
                    # Get the MSSQLServer\Parameters Key
            		$SqlDumpDir = (Get-ItemProperty -Path $CpeRegKey ).ErrorDumpDir
                    
                    if ($true -ne $?)
                    {
                        "[Get-DumpDirectory] : [ERROR] Failed to retrieve ErrorDumpDir registry value from key: [{0}]" -f $CpeRegKey | WriteTo-StdOut
                        Report-Error
                    }
                }  
                else
                {
                    "[Get-DumpDirectory] : [ERROR] Cpe registry key: [{0}] is invalid or does not exist" -f $CpeRegKey | WriteTo-StdOut
                    Report-Error
                }              
                
        	}
        	else
        	{
        		# Report that we could not locate the SQL Server dump directory
        		"[Get-DumpDirectory] : [ERROR] Unable to locate dump directory for Analysis Services Instance: [{0}]" -f $ASInstance | WriteTo-StdOut
        		"[Get-DumpDirectory] : [ERROR] Registry key: [{0}] is invalid" -f ($InstanceKey + "\CPE") | WriteTo-StdOut
        	}
            
        } # if ($null -ne $InstanceKey)
        else
        {
            '[Get-DumpDirectory] : [ERROR] Get-ASInstanceRootKey returned a null value' | WriteTo-StdOut
        }
    } 
    else
    {
        '[Get-DumpDirectory] : [ERROR] Required parameter -ASInstance was not specified' | WriteTo-StdOut
    }
    
	return $SqlDumpDir
}

#
# Function : Collect-ASMinidumps
# --------------------------------------
#
# PowerShell Version:
#			Written to be compatible with PowerShell 1.0
#
# Visibility:
#			Private/Internal - Do not call this function directly. Instead, call the top-level script and pass args
#			indicating which instances to collect dumps for  
#
# Description:
# 			This function enumerates the minidump files for a given SQL Server installation and 
# 
# Arguments:
#			String to write to file
# 
# Owner:
#			JoSims 
#
function Collect-ASMinidumps ([string]$InstanceToCollect)
{
    $Error.Clear()           
    trap 
    {
    	"[Collect-ASMinidumps] : [ERROR] Trapped error ..." | WriteTo-StdOut
    	Report-Error 
    }
	
    If ($null -ne $InstanceToCollect)
    {
        $DumpDir = Get-DumpDirectory -ASInstance $InstanceToCollect

    	if ($null -ne $DumpDir)
        {
            # Make sure the dump directory path is valid. 
            # When SQL Server is clustered, the instance could be online to another cluster node
            # If so, the drive where the dumps are stored may be offline from the node where the collector is running
            #
            if (Test-Path -Path $DumpDir -PathType "Container")
            {
                $DumpCount = get-childitem -Path (Join-Path -Path $Dumpdir -ChildPath "*") -Include "*.mdmp" | Get-Count
                
                # Create the dump inventory report ... even if there are no dumps present ... report will indicate this
                Write-DumpInventory -InstanceName $InstanceToCollect -DumpDir $DumpDir
                
                $FileFilters = @('*.mdmp')
                
                # First pass, enumerate the files but to not copy
			    $DumpFiles = @()
			    $DumpFiles = Copy-FileSql -SourcePath $DumpDir `
                     -FileFilters $FileFilters `
                     -FilePolicy $global:SQL:FILE_POLICY_SQL_SERVER_MINIDUMPS `
                     -InstanceName $InstanceToCollect `
					 -EnumerateOnly
                                        
                #Since forcing an array to be created with above syntax need to check the length to see if there are any entries in array
                if (($null -ne $DumpFiles) -and (0 -ne $Dumpfiles.Length))
                {
                    # Need to go get the SQLDUMP*.log and SQLDUMP*.txt files associated with the dumps we just collected
                    foreach ($file in $dumpfiles)
                    {
                       $LogFileFullPath = $file.Replace("mdmp", "log")
                       # Add the .log file to the list of filefilters to enumerate.  No need to test-path as the enumerate/copy routine does this
                       $FileFilters += split-path -Leaf -Path $LogFileFullPath
                       
                       $TxtFileFullPath = $file.Replace("mdmp", "txt")
                       $FileFilters += split-path -Leaf -Path $TxtFileFullPath
                    } 
                    
                    # Add SQLDUMPER_ERRORLOG
                    $FileFilters += "SQLDUMPER_ERRORLOG.log" 
                   
                    # Add exception.log if present
                    $FileFilters += "exception.log" 
                    
                    $MiniDumpArchiveName = "{0}_{1}_{2}_ASMiniDumps.zip" -f $env:ComputerName, $InstanceToCollect, (Get-LcidForSqlServer -SqlInstanceName $InstanceToCollect)
                
                    # Re-enumerate, this time copy and compress since we should have all files we want.  FilePolicy is applied "by filter" so no need
                    # to adjust it to account for additional files for this subsequent call
                    $DumpFiles = @()
			        $DumpFiles = Copy-FileSql -SourcePath $DumpDir `
                     -FileFilters $FileFilters `
                     -FilePolicy $global:SQL:FILE_POLICY_SQL_SERVER_MINIDUMPS `
                     -InstanceName $InstanceToCollect `
                     -SectionDescription ("Analysis Services minidumps and related files for instance {0}" -f $InstanceToCollect) `
                     -ZipArchiveName $MiniDumpArchiveName `
                     -CompressCollectedFiles
                     #-RenameCollectedFiles
                     
     
				} # if (($null -ne $DumpFiles) -and (0 -ne $Dumpfiles.Length))
                else
                {
                    "[Collect-ASMinidumps] : [INFO] No minidumps found for instance: [{0}]" -f $InstanceToCollect | WriteTo-StdOut
                }  
            }
            # Test-path failed for $DumpDir ... could be because the cluster resource where the dumpfiles are stored is offline to this cluster node
            else 
        	{
                if ($true -eq (Check-IsSqlDiskResourceOnline $InstanceToCollect $DumpDir))
                {
                    "[Check-IsSqlDiskResourceOffline] : [ERROR] Path to minidumps: [{0}] for instance: {1} is invalid" -f $DumpDir, $InstanceToCollect | WriteTo-StdOut
                }
        	}
            
        } #if ($null -ne $DumpDir)
        else
        {
            '[Collect-ASMinidumps] : [ERROR} Get-Dumpdirectory returned a null dump directory path for instance: [{0}]' -f $InstanceToCollect  | WriteTo-StdOut
        }
    } # If ($null -ne $InstanceToCollect)
    else
    {
        '[Collect-ASMinidumps] : [ERROR} Required parameter -InstanceToCollect was not specified' | WriteTo-StdOut
    }
}

#
# Script entry point
#

#region: MAIN ::::: 
$Error.Clear()           
trap 
{
	"[DC-CollectASMinidumps] : [ERROR] Trapped error ..." | WriteTo-StdOut
	Report-Error
}
	
Import-LocalizedData -BindingVariable minidumpCollectorStrings

# Check to be sure that there is at least one SQL Server installation on target machine before proceeding
#
if ($true -eq (Check-ASIsInstalled))
{
	# If $instance parameter is null, collect minidumps for all instances installed on machine
	if ($null -eq $instances)
	{
		if ($true -eq (Test-Path -Path "HKLM:\Software\Microsoft\Microsoft SQL Server\Instance Names\OLAP"))
	    {
	   		$instances = @(Enumerate-Instances -KeyToEnumerate "HKLM:\Software\Microsoft\Microsoft SQL Server\Instance Names\OLAP")
	    }
	    else
	    {
	        "[DC_CollectASMinidumps] : [INFO] SQL Server registry key: [{0}] was not found" -f "HKLM:\Software\Microsoft\Microsoft SQL Server\Instance Names\OLAP" | WriteTo-StdOut
	    }
    
		#Enumare 32 bit instances if any exist
		if ($true -eq  (Test-Path -Path "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Microsoft SQL Server\Instance Names\OLAP"))
		{
			$instances += @(Enumerate-Instances -KeyToEnumerate "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Microsoft SQL Server\Instance Names\OLAP")
		}
	    else
	    {
	        "[DC_CollectASMinidumps] : [INFO] There are no Wow6432 SQL Server installations on server: [{0}] Wow6432Node instance Names key [{1}] was not found" -f $env:ComputerName, "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Microsoft SQL Server\Instance Names\OLAP" | WriteTo-StdOut
	    }
	}
    
    if ($null -ne $instances)
    {
        foreach ($instance in $instances)
        {
			"[DC-CollectASMinidumps] : Attempting to collect minidumps for OLAP instance: [{0}]" -f $instance.InstanceName | WriteTo-StdOut
            Write-DiagProgress -Activity $minidumpCollectorStrings.ID_SQL_CollectSqlMinidumps -Status ($minidumpCollectorStrings.ID_SQL_CollectSqlMinidumpsDesc + ": " + $instance.InstanceName)
			
            # DEFAULT instance name is MSSQLSERVER in registry and filesystem.  Translate it here before doing any work
            if ('DEFAULT' -eq $instance.ToUpper()) {$instance='MSSQLSERVER'}
            
			Collect-ASMinidumps -InstanceToCollect $instance
        }
    }
} # if ($true -eq (Check-ASIsInstalled))
else
{
    "[DC-CollectASMinidumps] : [INFO] No OLAP installation(s) were found on server: [{0}]" -f $env:ComputerName | WriteTo-StdOut
}
#endregion: MAIN ::::: 


# SIG # Begin signature block
# MIInoQYJKoZIhvcNAQcCoIInkjCCJ44CAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCAQM7CXfCGND42z
# EEYwqsQhvObvFG1edCW5HMGLhdwGhaCCDXYwggX0MIID3KADAgECAhMzAAACy7d1
# OfsCcUI2AAAAAALLMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
# bmcgUENBIDIwMTEwHhcNMjIwNTEyMjA0NTU5WhcNMjMwNTExMjA0NTU5WjB0MQsw
# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
# AQC3sN0WcdGpGXPZIb5iNfFB0xZ8rnJvYnxD6Uf2BHXglpbTEfoe+mO//oLWkRxA
# wppditsSVOD0oglKbtnh9Wp2DARLcxbGaW4YanOWSB1LyLRpHnnQ5POlh2U5trg4
# 3gQjvlNZlQB3lL+zrPtbNvMA7E0Wkmo+Z6YFnsf7aek+KGzaGboAeFO4uKZjQXY5
# RmMzE70Bwaz7hvA05jDURdRKH0i/1yK96TDuP7JyRFLOvA3UXNWz00R9w7ppMDcN
# lXtrmbPigv3xE9FfpfmJRtiOZQKd73K72Wujmj6/Su3+DBTpOq7NgdntW2lJfX3X
# a6oe4F9Pk9xRhkwHsk7Ju9E/AgMBAAGjggFzMIIBbzAfBgNVHSUEGDAWBgorBgEE
# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQUrg/nt/gj+BBLd1jZWYhok7v5/w4w
# RQYDVR0RBD4wPKQ6MDgxHjAcBgNVBAsTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEW
# MBQGA1UEBRMNMjMwMDEyKzQ3MDUyODAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzci
# tW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5j
# b20vcGtpb3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEG
# CCsGAQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3dy5taWNyb3NvZnQu
# Y29tL3BraW9wcy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0
# MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAJL5t6pVjIRlQ8j4dAFJ
# ZnMke3rRHeQDOPFxswM47HRvgQa2E1jea2aYiMk1WmdqWnYw1bal4IzRlSVf4czf
# zx2vjOIOiaGllW2ByHkfKApngOzJmAQ8F15xSHPRvNMmvpC3PFLvKMf3y5SyPJxh
# 922TTq0q5epJv1SgZDWlUlHL/Ex1nX8kzBRhHvc6D6F5la+oAO4A3o/ZC05OOgm4
# EJxZP9MqUi5iid2dw4Jg/HvtDpCcLj1GLIhCDaebKegajCJlMhhxnDXrGFLJfX8j
# 7k7LUvrZDsQniJZ3D66K+3SZTLhvwK7dMGVFuUUJUfDifrlCTjKG9mxsPDllfyck
# 4zGnRZv8Jw9RgE1zAghnU14L0vVUNOzi/4bE7wIsiRyIcCcVoXRneBA3n/frLXvd
# jDsbb2lpGu78+s1zbO5N0bhHWq4j5WMutrspBxEhqG2PSBjC5Ypi+jhtfu3+x76N
# mBvsyKuxx9+Hm/ALnlzKxr4KyMR3/z4IRMzA1QyppNk65Ui+jB14g+w4vole33M1
# pVqVckrmSebUkmjnCshCiH12IFgHZF7gRwE4YZrJ7QjxZeoZqHaKsQLRMp653beB
# fHfeva9zJPhBSdVcCW7x9q0c2HVPLJHX9YCUU714I+qtLpDGrdbZxD9mikPqL/To
# /1lDZ0ch8FtePhME7houuoPcMIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkq
# hkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
# EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
# bjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
# IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQG
# EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
# A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQg
# Q29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC
# CgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03
# a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akr
# rnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0Rrrg
# OGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy
# 4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9
# sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAh
# dCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8k
# A/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTB
# w3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmn
# Eyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90
# lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0w
# ggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2o
# ynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYD
# VR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBa
# BgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2Ny
# bC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsG
# AQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
# L3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNV
# HSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3
# dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsG
# AQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABl
# AG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKb
# C5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11l
# hJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6
# I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0
# wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560
# STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQam
# ASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGa
# J+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ah
# XJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA
# 9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33Vt
# Y5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr
# /Xmfwb1tbWrJUnMTDXpQzTGCGYEwghl9AgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw
# EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
# aWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNp
# Z25pbmcgUENBIDIwMTECEzMAAALLt3U5+wJxQjYAAAAAAsswDQYJYIZIAWUDBAIB
# BQCggbAwGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEO
# MAwGCisGAQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIIaScnU1Z2qcw5/1TbXr3BNA
# GgM7ZbdLW9tirsO4onDWMEQGCisGAQQBgjcCAQwxNjA0oBSAEgBNAGkAYwByAG8A
# cwBvAGYAdKEcgBpodHRwczovL3d3dy5taWNyb3NvZnQuY29tIDANBgkqhkiG9w0B
# AQEFAASCAQB9dz0zPJMOe4YPAXGle8AaL8Mx6iBjllzox2/lteTEFh7PkwAM+vKr
# mWwFmORTthpUk+HsTaIJ3zpkxTBsSdH2Ig1rKwlwe8FJIKgxSjufrq970qeOBuR+
# 6njFFIxgxUXVgxCV4Sl0Ub1KEuUbkDDO7+izioH07ol2Eu2a1fwTxNKbv50RlGVS
# dkBaKQ584HcLS+UG3YXVRhppxR8uQtt4Er8YAjSXSSnK6lGrFdAgQqM/1e3fgZZy
# wXWWLHzkWHrYePQh+M7kO1//l27qyR5+iTWwWekuLTVnR+mpaxiPxAjBB6oxRtmF
# Lb5bEEkPREActFvnfIVpL5QAM33QSJ3YoYIXCTCCFwUGCisGAQQBgjcDAwExghb1
# MIIW8QYJKoZIhvcNAQcCoIIW4jCCFt4CAQMxDzANBglghkgBZQMEAgEFADCCAVUG
# CyqGSIb3DQEJEAEEoIIBRASCAUAwggE8AgEBBgorBgEEAYRZCgMBMDEwDQYJYIZI
# AWUDBAIBBQAEIFhjcI7Xf2EYSYl50a3pgjERu7L+eBTteoNc2XxbFIpyAgZi2xAQ
# QUAYEzIwMjIwODAxMTEwNTA0Ljg4M1owBIACAfSggdSkgdEwgc4xCzAJBgNVBAYT
# AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
# VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKTAnBgNVBAsTIE1pY3Jvc29mdCBP
# cGVyYXRpb25zIFB1ZXJ0byBSaWNvMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjo4
# OTdBLUUzNTYtMTcwMTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vy
# dmljZaCCEVwwggcQMIIE+KADAgECAhMzAAABqwkJ76tj1OipAAEAAAGrMA0GCSqG
# SIb3DQEBCwUAMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAw
# DgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
# JjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMB4XDTIyMDMw
# MjE4NTEyOFoXDTIzMDUxMTE4NTEyOFowgc4xCzAJBgNVBAYTAlVTMRMwEQYDVQQI
# EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3Nv
# ZnQgQ29ycG9yYXRpb24xKTAnBgNVBAsTIE1pY3Jvc29mdCBPcGVyYXRpb25zIFB1
# ZXJ0byBSaWNvMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjo4OTdBLUUzNTYtMTcw
# MTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCAiIwDQYJ
# KoZIhvcNAQEBBQADggIPADCCAgoCggIBAMmdS1o5dehASUsscLqyx2wm/WirNUfq
# kGBymDItYzEnoKtkhrd7wNsJs4g+BuM3uBX81WnO270lkrC0e1mmDqQt420Tmb8l
# wsjQKM6mEaNQIfXDronrVN3aw1lx9bAf7VZEA3kHFql6YAO3kjQ6PftA4iVHX3JV
# v98ntjkbtqzKeJMaNWd8dBaAD3RCliMoajTDGbyYNKTvxBhWILyJ8WYdJ/NBDpqP
# zQl+pxm6ZZVSeBQAIOubZjU0vfpECxHC5vI1ErrqapG+0oBhhON+gllVklPAWZv2
# iv0mgjCTj7YNKX7yL2x2TvrvHVq5GPNa5fNbpy39t5cviiYqMf1RZVZccdr+2vAp
# k5ib5a4O8SiAgPSUwYGoOwbZG1onHij0ATPLkgKUfgaPzFfd5JZSbRl2Xg347/Lj
# WQLR+KjAyACFb06bqWzvHtQJTND8Y0j5Y2SBnSCqV2zNHSVts4+aUfkUhsKS+GAX
# S3j5XUgYA7SMNog76Nnss5l01nEX7sHDdYykYhzuQKFrT70XVTZeX25tSBfy3Vac
# zYd1JSI/9wOGqbFU52NyrlsA1qimxOhsuds7Pxo+jO3RjV/kC+AEOoVaXDdminsc
# 3PtlBCVh/sgYno9AUymblSRmee1gwlnlZJ0uiHKI9q2HFgZWM10yPG5gVt0prXnJ
# Fi1Wxmmg+BH/AgMBAAGjggE2MIIBMjAdBgNVHQ4EFgQUFFvO8o1eNcSCIQZMvqGf
# dNL+pqowHwYDVR0jBBgwFoAUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXwYDVR0fBFgw
# VjBUoFKgUIZOaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWlj
# cm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3JsMGwGCCsGAQUF
# BwEBBGAwXjBcBggrBgEFBQcwAoZQaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
# aW9wcy9jZXJ0cy9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIwMjAxMCgx
# KS5jcnQwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDCDANBgkqhkiG
# 9w0BAQsFAAOCAgEAykuUgTc1KMszMgsHbhgjgEGv/dCHFf0by99C45SR770/udCN
# NeqlT610Ehz13xGFU6Hci+TLUPUnhvUnSuz7xkiWRru5RjZZmSonEVv8npa3z1Qv
# eUfngtyi0Jd6qlSykoEVJ6tDuR1Kw9xU9yvthZWhQs/ymyOwh+mxt0C9wbeLJ92e
# r2vc9ly12pFxbCNDJ+mQ7v520hAvreWqZ02GOJhw0R4c1iP39iNBzHOoz+DsO0sY
# jwhaz9HrvYMEzOD1MJdLPWfUFsZ//iTd3jzEykk02WjnZNzIe2ENfmQ/KblGXHeS
# e8JYqimTFxl5keMfLUELjAh0mhQ1vLCJZ20BwC4O57Eg7yO/YuBno+4RrV0CD2gp
# 4BO10KFW2SQ/MhvRWK7HbgS6Bzt70rkIeSUto7pRkHMqrnhubITcXddky6GtZsmw
# M3hvqXuStMeU1W5NN3HA8ypjPLd/bomfGx96Huw8OrftcQvk7thdNu4JhAyKUXUP
# 7dKMCJfrOdplg0j1tE0aiE+pDTSQVmPzGezCL42slyPJVXpu4xxE0hpACr2ua0LH
# v/LB6RV5C4CO4Ms/pfal//F3O+hJZe5ixevzKNkXXbxPOa1R+SIrW/rHZM6RIDLT
# JxTGFDM1hQDyafGu9S/a7umkvilgBHNxZfk0IYE7RRWJcG7oiY+FGdx1cs0wggdx
# MIIFWaADAgECAhMzAAAAFcXna54Cm0mZAAAAAAAVMA0GCSqGSIb3DQEBCwUAMIGI
# MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVk
# bW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQDEylN
# aWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgMjAxMDAeFw0yMTA5
# MzAxODIyMjVaFw0zMDA5MzAxODMyMjVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
# EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3Nv
# ZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBD
# QSAyMDEwMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA5OGmTOe0ciEL
# eaLL1yR5vQ7VgtP97pwHB9KpbE51yMo1V/YBf2xK4OK9uT4XYDP/XE/HZveVU3Fa
# 4n5KWv64NmeFRiMMtY0Tz3cywBAY6GB9alKDRLemjkZrBxTzxXb1hlDcwUTIcVxR
# MTegCjhuje3XD9gmU3w5YQJ6xKr9cmmvHaus9ja+NSZk2pg7uhp7M62AW36MEByd
# Uv626GIl3GoPz130/o5Tz9bshVZN7928jaTjkY+yOSxRnOlwaQ3KNi1wjjHINSi9
# 47SHJMPgyY9+tVSP3PoFVZhtaDuaRr3tpK56KTesy+uDRedGbsoy1cCGMFxPLOJi
# ss254o2I5JasAUq7vnGpF1tnYN74kpEeHT39IM9zfUGaRnXNxF803RKJ1v2lIH1+
# /NmeRd+2ci/bfV+AutuqfjbsNkz2K26oElHovwUDo9Fzpk03dJQcNIIP8BDyt0cY
# 7afomXw/TNuvXsLz1dhzPUNOwTM5TI4CvEJoLhDqhFFG4tG9ahhaYQFzymeiXtco
# dgLiMxhy16cg8ML6EgrXY28MyTZki1ugpoMhXV8wdJGUlNi5UPkLiWHzNgY1GIRH
# 29wb0f2y1BzFa/ZcUlFdEtsluq9QBXpsxREdcu+N+VLEhReTwDwV2xo3xwgVGD94
# q0W29R6HXtqPnhZyacaue7e3PmriLq0CAwEAAaOCAd0wggHZMBIGCSsGAQQBgjcV
# AQQFAgMBAAEwIwYJKwYBBAGCNxUCBBYEFCqnUv5kxJq+gpE8RjUpzxD/LwTuMB0G
# A1UdDgQWBBSfpxVdAF5iXYP05dJlpxtTNRnpcjBcBgNVHSAEVTBTMFEGDCsGAQQB
# gjdMg30BATBBMD8GCCsGAQUFBwIBFjNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20v
# cGtpb3BzL0RvY3MvUmVwb3NpdG9yeS5odG0wEwYDVR0lBAwwCgYIKwYBBQUHAwgw
# GQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8GA1UdEwEB
# /wQFMAMBAf8wHwYDVR0jBBgwFoAU1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0f
# BE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJv
# ZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4w
# TDBKBggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0
# cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcnQwDQYJKoZIhvcNAQELBQADggIB
# AJ1VffwqreEsH2cBMSRb4Z5yS/ypb+pcFLY+TkdkeLEGk5c9MTO1OdfCcTY/2mRs
# fNB1OW27DzHkwo/7bNGhlBgi7ulmZzpTTd2YurYeeNg2LpypglYAA7AFvonoaeC6
# Ce5732pvvinLbtg/SHUB2RjebYIM9W0jVOR4U3UkV7ndn/OOPcbzaN9l9qRWqveV
# tihVJ9AkvUCgvxm2EhIRXT0n4ECWOKz3+SmJw7wXsFSFQrP8DJ6LGYnn8AtqgcKB
# GUIZUnWKNsIdw2FzLixre24/LAl4FOmRsqlb30mjdAy87JGA0j3mSj5mO0+7hvoy
# GtmW9I/2kQH2zsZ0/fZMcm8Qq3UwxTSwethQ/gpY3UA8x1RtnWN0SCyxTkctwRQE
# cb9k+SS+c23Kjgm9swFXSVRk2XPXfx5bRAGOWhmRaw2fpCjcZxkoJLo4S5pu+yFU
# a2pFEUep8beuyOiJXk+d0tBMdrVXVAmxaQFEfnyhYWxz/gq77EFmPWn9y8FBSX5+
# k77L+DvktxW/tM4+pTFRhLy/AsGConsXHRWJjXD+57XQKBqJC4822rpM+Zv/Cuk0
# +CQ1ZyvgDbjmjJnW4SLq8CdCPSWU5nR0W2rRnj7tfqAxM328y+l7vzhwRNGQ8cir
# Ooo6CGJ/2XBjU02N7oJtpQUQwXEGahC0HVUzWLOhcGbyoYICzzCCAjgCAQEwgfyh
# gdSkgdEwgc4xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
# VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKTAn
# BgNVBAsTIE1pY3Jvc29mdCBPcGVyYXRpb25zIFB1ZXJ0byBSaWNvMSYwJAYDVQQL
# Ex1UaGFsZXMgVFNTIEVTTjo4OTdBLUUzNTYtMTcwMTElMCMGA1UEAxMcTWljcm9z
# b2Z0IFRpbWUtU3RhbXAgU2VydmljZaIjCgEBMAcGBSsOAwIaAxUAW6h6/24WCo7W
# Zz6CEVAeLztcmD6ggYMwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
# aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
# cnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
# MDANBgkqhkiG9w0BAQUFAAIFAOaSFJgwIhgPMjAyMjA4MDExMzAwMDhaGA8yMDIy
# MDgwMjEzMDAwOFowdDA6BgorBgEEAYRZCgQBMSwwKjAKAgUA5pIUmAIBADAHAgEA
# AgIH7TAHAgEAAgIRPTAKAgUA5pNmGAIBADA2BgorBgEEAYRZCgQCMSgwJjAMBgor
# BgEEAYRZCgMCoAowCAIBAAIDB6EgoQowCAIBAAIDAYagMA0GCSqGSIb3DQEBBQUA
# A4GBACHzuPjauU36ZI5rYh5uoT5heeEG0sgQKb2+PWu+7q4fehfAbwWZjglckfIw
# w7YUJ78Mx6ukVDeqfGR5r+nCkJYl+8dA5ohjudf+uGPAl8nPDJRokGbsIZvKpzuN
# 51c3oCOqAHGVYQpzlyQpK26auBviAMs9PxaD7DyxOOZ3y0dUMYIEDTCCBAkCAQEw
# gZMwfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
# B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UE
# AxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTACEzMAAAGrCQnvq2PU6KkA
# AQAAAaswDQYJYIZIAWUDBAIBBQCgggFKMBoGCSqGSIb3DQEJAzENBgsqhkiG9w0B
# CRABBDAvBgkqhkiG9w0BCQQxIgQgcB/kMf030QLEJmxyHvCELdwV30OetcFWrEws
# MBiWSXowgfoGCyqGSIb3DQEJEAIvMYHqMIHnMIHkMIG9BCAOHK/6sIVgEVSVD3Ar
# vk6OyQKvRxFHKyraUzbN1/AKVzCBmDCBgKR+MHwxCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1w
# IFBDQSAyMDEwAhMzAAABqwkJ76tj1OipAAEAAAGrMCIEIFMQw29o3Zoz4ypnO4Np
# Kv4V0E9zF9vg8gSRqT/o1aSiMA0GCSqGSIb3DQEBCwUABIICAJ5MQvePQVuuKjZ2
# nFCyOJKoAO2p0b/0NsyT1HXnJOW5DP0uUfthAKE3wVD59ArNQjgMX8FQ9bYxxOJI
# AbkXcrpkDTjX9MC6xdOVIUbNutM2ke9pz7R865TqDFPYoc+j4E1CV4rIicCaSvvn
# qhPg6d/9d+bUWF05Kye5Avyd199rKuIGSW5zfFzy6SsdnC6I4+eqDu6kPFXSLWO1
# F8gLKwlb6595j6FJCd+DSJws+UqrJ/qHHGH/KrCQFuXqBEMwJaKMfKzCKoQs1sCM
# +uIgZ080mLkX79mrHo//K0YXfXmlUycw3Dssfu4UdPka7O3Uyz7FgsgZM6frfsCI
# lZKfeEv61tTBm9jkoah3Z6IZ8zkTg0NrXtnliXP1eHtzUP40zLygYRWJg57fCWkW
# nlEpCkhXITmJwS8A0YXR3GlVkBnSU8G+4SLkujzrCVAF+jfV5N8maNZlaZusnccg
# yubgMDmlfJfXQ0i70Q1XPpLb6mHD2+rRMZAKPzyfg7Zj7deM2xM3l4hD8pYeHIkd
# 3UcvsTKjZfNQeIMtBwDp846X9nvltrGPY9UqomUMzg0pGVGKt6jlUn6BgEf1wj94
# 7F6HhM+VMu+p72zuFn/gZJgVXUnjlJ9Rlo56icTwdXSxEHiFzaIBvnAXE4XpGLiZ
# 1sZEtb+Bh2wPTK+IjJitJMK9iC9W
# SIG # End signature block
